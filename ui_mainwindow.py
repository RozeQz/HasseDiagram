# Form implementation generated from reading ui file 'ui_mainwindow.ui'
#
# Created by: PyQt6 UI code generator 6.3.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.

import networkx as nx
import matplotlib.pyplot as plt
import re
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.figure import Figure
from PyQt6 import QtCore, QtGui, QtWidgets
from binaryRelation import BinaryRelation
from hasseDiagram import HasseDiagram


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(240, 310)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.lbl_symm = QtWidgets.QLabel(self.centralwidget)
        self.lbl_symm.setGeometry(QtCore.QRect(20, 190, 201, 16))
        font = QtGui.QFont()
        font.setPointSize(8)
        font.setBold(False)
        font.setItalic(False)
        font.setUnderline(False)
        font.setWeight(50)
        font.setStrikeOut(False)
        font.setKerning(True)
        self.lbl_symm.setFont(font)
        self.lbl_symm.setText("")
        self.lbl_symm.setObjectName("lbl_symm")
        self.lbl_reflex = QtWidgets.QLabel(self.centralwidget)
        self.lbl_reflex.setGeometry(QtCore.QRect(20, 170, 201, 16))
        font = QtGui.QFont()
        font.setPointSize(8)
        font.setBold(False)
        font.setItalic(False)
        font.setUnderline(False)
        font.setWeight(50)
        font.setStrikeOut(False)
        font.setKerning(True)
        self.lbl_reflex.setFont(font)
        self.lbl_reflex.setText("")
        self.lbl_reflex.setObjectName("lbl_reflex")
        self.edt_setR = QtWidgets.QTextEdit(self.centralwidget)
        self.edt_setR.setGeometry(QtCore.QRect(20, 60, 200, 30))
        self.edt_setR.setObjectName("edt_setR")
        self.lbl_props = QtWidgets.QLabel(self.centralwidget)
        self.lbl_props.setGeometry(QtCore.QRect(20, 150, 201, 16))
        font = QtGui.QFont()
        font.setPointSize(8)
        font.setBold(False)
        font.setItalic(False)
        font.setUnderline(False)
        font.setWeight(50)
        font.setStrikeOut(False)
        font.setKerning(True)
        self.lbl_props.setFont(font)
        self.lbl_props.setObjectName("lbl_props")
        self.edt_setA = QtWidgets.QTextEdit(self.centralwidget)
        self.edt_setA.setGeometry(QtCore.QRect(20, 20, 200, 30))
        self.edt_setA.setObjectName("edt_setA")
        self.lbl_antisym = QtWidgets.QLabel(self.centralwidget)
        self.lbl_antisym.setGeometry(QtCore.QRect(20, 230, 201, 16))
        font = QtGui.QFont()
        font.setPointSize(8)
        font.setBold(False)
        font.setItalic(False)
        font.setUnderline(False)
        font.setWeight(50)
        font.setStrikeOut(False)
        font.setKerning(True)
        self.lbl_antisym.setFont(font)
        self.lbl_antisym.setText("")
        self.lbl_antisym.setObjectName("lbl_antisym")
        self.btn_run = QtWidgets.QPushButton(self.centralwidget)
        self.btn_run.setGeometry(QtCore.QRect(83, 110, 74, 23))
        self.btn_run.setObjectName("btn_run")
        self.lbl_trans = QtWidgets.QLabel(self.centralwidget)
        self.lbl_trans.setGeometry(QtCore.QRect(20, 210, 201, 16))
        font = QtGui.QFont()
        font.setPointSize(8)
        font.setBold(False)
        font.setItalic(False)
        font.setUnderline(False)
        font.setWeight(50)
        font.setStrikeOut(False)
        font.setKerning(True)
        self.lbl_trans.setFont(font)
        self.lbl_trans.setText("")
        self.lbl_trans.setObjectName("lbl_trans")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 240, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        # Manual editing!
        self.add_functions()        # Добавление сигналов

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Диаграмма Хассе"))
        self.edt_setR.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p></body></html>"))
        self.edt_setR.setPlaceholderText(_translate("MainWindow", "Введите бинарное отношение R:"))
        self.lbl_props.setText(_translate("MainWindow", "Свойства бинарного отношения:"))
        self.edt_setA.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p></body></html>"))
        self.edt_setA.setPlaceholderText(_translate("MainWindow", "Введите множеств А:"))
        self.btn_run.setText(_translate("MainWindow", "Выполнить"))

    def create_diagram(self, bin_rel) -> HasseDiagram:
        print("Диаграмма хассе на множестве ", bin_rel.get_A())
        return HasseDiagram(bin_rel)

    def add_functions(self):
        # self.btn_run.clicked.connect(lambda: self.create_diagram(self.input()[0]))
        self.btn_run.clicked.connect(lambda: self.button_click())

    def output(self):
        binary = self.create_binary_relation()
        hd = self.create_diagram(binary)
        hd.draw()

        self.widget = PlotCanvas(hd, self.centralwidget)  # Полотно для рисования
        self.widget.setGeometry(QtCore.QRect(300, 0, 400, 400))
        self.widget.setObjectName("widget")

        if binary.is_reflexive():
            self.lbl_reflex.setText("Бинарное отношение рефлексивно!")
        elif binary.is_irreflexive():
            self.lbl_reflex.setText("Бинарное отношение иррефлексивно!")
        else:
            self.lbl_reflex.setText("Бинарное отношение нерефлексивно!")
        self.lbl_symm.setText("Бинарное отношение симметрично!") if binary.is_symmetrical() else self.lbl_symm.setText("Бинарное отношение несимметрично!")
        self.lbl_trans.setText("Бинарное отношение транзитивно!") if binary.is_transitive() else self.lbl_trans.setText("Бинарное отношение нетранзитивно!")
        self.lbl_antisym.setText("Бинарное отношение антисимметрично!") if binary.is_antisymm() else self.lbl_antisym.setText(
            "Бинарное отношение не антисимметрично!")
        self.lbl_props.setText(binary.class_of_relation())

    def button_click(self):
        self.output()
        # self.create_diagram(self.create_binary_relation())
        # PlotCanvas.plot(self.create_diagram(self.create_binary_relation()))

    def create_binary_relation(self) -> BinaryRelation:
        return BinaryRelation(self.input()[0], self.input()[1])

    def input(self) -> list:    # Ввод данных
        new_R = []
        A = set(map(int, re.findall(r'\w+', self.edt_setA.toPlainText())))  # Ввод числового множества
        R = re.findall(r'\([^)]*\)', self.edt_setR.toPlainText())  # Ввод бинарного отношения перечислением пар TODO: сделать валидацию R ⊆ A^2
        for i in R:
            R_str = tuple(map(str, re.findall(r'\w+\.?\w*', i)))  # Преобразуем в пару строковых значений
            try:
                R_int = tuple(map(int, R_str))  # Преобразуем в пару целочисленных значений
                new_R.append(R_int)
            except ValueError:
                try:
                    R_float = tuple(map(float, R_str))  # Преобразуем в пару чисел с плавающей запятой
                    new_R.append(R_float)
                except ValueError:
                    new_R.append(R_str)
        R = new_R
        return [A, R]


class PlotCanvas(FigureCanvas):  # By inheriting the FigureCanvas class, this class is both a PyQt5 Qwidget and a Matplotlib FigureCanvas, which is the key to connecting pyqt5 and matplotlib
    def __init__(self, hd, parent=None, width=500, height=500, dpi=100):
        fig = Figure(figsize=(width, height), dpi=dpi)  # Create a Figure. Note: This Figure is a figure under matplotlib, not a figure under matplotlib.pyplot
        self.axes = fig.add_subplot(111)  # Call the add_subplot method under figure, similar to the subplot method under matplotlib.pyplot
        # self.plot(hd)
        FigureCanvas.__init__(self, fig)  # Initialize the parent class
        self.setParent(parent)
        FigureCanvas.setSizePolicy(self, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Expanding)
        FigureCanvas.updateGeometry(self)

    # def plot(self, hasse_diagram):
    #     G = nx.Graph()
    #     G.add_nodes_from(hasse_diagram.get_A())
    #     G.add_edges_from(hasse_diagram.get_R())
    #     pos = nx.spring_layout(G)
    #     nx.draw_networkx_nodes(G, pos, node_size=500)
    #     nx.draw_networkx_edges(G, pos, edgelist=G.edges(), edge_color='black')
    #     nx.draw_networkx_labels(G, pos)
    #     nx.draw(G, pos=nx.spring_layout(G), node_color='w', ax=self.axes, edge_color='b', with_labels=True, alpha=1, font_size=10, node_size=20, arrows=True)
    #     plt.show()